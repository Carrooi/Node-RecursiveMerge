// Generated by CoffeeScript 1.6.3
(function() {
  var merge,
    __slice = [].slice;

  merge = function(left, right) {
    var i, leftType, name, rightType, type, value, valueType, _i, _len;
    type = Object.prototype.toString;
    leftType = type.call(left);
    rightType = type.call(right);
    if (leftType !== rightType) {
      throw new Error('Can not merge ' + leftType + ' with ' + rightType + '.');
    }
    switch (leftType) {
      case '[object Array]':
        for (i = _i = 0, _len = right.length; _i < _len; i = ++_i) {
          value = right[i];
          valueType = type.call(value);
          if ((valueType === '[object Array]' || valueType === '[object Object]') && value !== null) {
            left[i] = merge(left[i], value);
          } else {
            left.push(value);
          }
        }
        break;
      case '[object Object]':
        for (name in right) {
          value = right[name];
          if (right.hasOwnProperty(name) && (name !== '__proto__')) {
            valueType = type.call(value);
            if (typeof left[name] === 'undefined' || left[name] === null) {
              left[name] = value;
            } else if (valueType === '[object Array]' || valueType === '[object Object]') {
              left[name] = merge(left[name], value);
            }
          }
        }
        break;
      default:
        throw new Error('Can not merge ' + leftType + ' objects.');
    }
    return left;
  };

  module.exports = function() {
    var left, r, right, _i, _len;
    left = arguments[0], right = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = right.length; _i < _len; _i++) {
      r = right[_i];
      left = merge(left, r);
    }
    return left;
  };

}).call(this);
